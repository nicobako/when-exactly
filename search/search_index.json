{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to when-exactly An expressive and intuitive library for working with dates. Rationale When people think about dates and times we tend to think in terms of years , months , weeks , days , hours , minutes , etc. When-Exactly is a library that aims to bring these types into the hands of developers, so they can write more expressive code when working with dates. Overview >>> import when_exactly as we >>> year = we.Year(2025) # the year 2025 >>> year Year(2025) >>> month = year.month(1) # month 1 (January) >>> month Month(2025, 1) >>> day = we.Day(2025, 12, 25) # December 25, 2025 >>> day Day(2025, 12, 25) >>> day.month() # the month that the day is a part of Month(2025, 12) >>> day.week() # the week that the day is a part of Week(2025, 52)","title":"Home"},{"location":"#welcome-to-when-exactly","text":"An expressive and intuitive library for working with dates.","title":"Welcome to when-exactly"},{"location":"#rationale","text":"When people think about dates and times we tend to think in terms of years , months , weeks , days , hours , minutes , etc. When-Exactly is a library that aims to bring these types into the hands of developers, so they can write more expressive code when working with dates.","title":"Rationale"},{"location":"#overview","text":">>> import when_exactly as we >>> year = we.Year(2025) # the year 2025 >>> year Year(2025) >>> month = year.month(1) # month 1 (January) >>> month Month(2025, 1) >>> day = we.Day(2025, 12, 25) # December 25, 2025 >>> day Day(2025, 12, 25) >>> day.month() # the month that the day is a part of Month(2025, 12) >>> day.week() # the week that the day is a part of Week(2025, 52)","title":"Overview"},{"location":"getting-started/","text":"Getting Started Installation pip install when-exactly Usage Since when_exactly is a bit verbose, it is recommended to use an import alias, such as we . import when_exactly as we","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"pip install when-exactly","title":"Installation"},{"location":"getting-started/#usage","text":"Since when_exactly is a bit verbose, it is recommended to use an import alias, such as we . import when_exactly as we","title":"Usage"},{"location":"tutorial/advanced-concepts/","text":"","title":"Advanced concepts"},{"location":"tutorial/core-concepts/","text":"Core Concepts Since When-Exactly allows developers to interact with dates and times in a very unique way, it is worth while becoming familiar with some of the lower-level building blocks. Moment The Moment represents, as the name suggests, a moment in time . This is analogous to Python's datetime.datetime class. >>> import when_exactly as we >>> moment = we.Moment( ... year=2025, ... month=1, ... day=30, ... hour=15, ... minute=25, ... second=30, ... ) >>> moment Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) Moments can be created from datetimes, and can be converted to datetimes. >>> import datetime >>> moment.to_datetime() datetime.datetime(2025, 1, 30, 15, 25, 30) >>> dt = datetime.datetime(2025, 1, 30, 15, 25, 30) >>> we.Moment.from_datetime(dt) Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) The Moment is really a simple class, but it is used prevalently throughought When-Exactly .","title":"Core Concepts"},{"location":"tutorial/core-concepts/#core-concepts","text":"Since When-Exactly allows developers to interact with dates and times in a very unique way, it is worth while becoming familiar with some of the lower-level building blocks.","title":"Core Concepts"},{"location":"tutorial/core-concepts/#moment","text":"The Moment represents, as the name suggests, a moment in time . This is analogous to Python's datetime.datetime class. >>> import when_exactly as we >>> moment = we.Moment( ... year=2025, ... month=1, ... day=30, ... hour=15, ... minute=25, ... second=30, ... ) >>> moment Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) Moments can be created from datetimes, and can be converted to datetimes. >>> import datetime >>> moment.to_datetime() datetime.datetime(2025, 1, 30, 15, 25, 30) >>> dt = datetime.datetime(2025, 1, 30, 15, 25, 30) >>> we.Moment.from_datetime(dt) Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) The Moment is really a simple class, but it is used prevalently throughought When-Exactly .","title":"Moment"},{"location":"tutorial/delta/","text":"Delta","title":"Delta"},{"location":"tutorial/delta/#delta","text":"","title":"Delta"},{"location":"tutorial/moment/","text":"Moment The Moment represents, as the name suggests, a moment in time . It is analogous to Python's datetime.datetime class. The Moment is a simple class that it is used prevalently throughought When-Exactly . Creating a Moment >>> import when_exactly as we >>> moment = we.Moment( ... year=2025, ... month=1, ... day=30, ... hour=15, ... minute=25, ... second=30, ... ) >>> moment Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) >>> # or, more concisely >>> we.Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) Moments can be created from datetimes, and can be converted to datetimes. >>> import datetime >>> moment.to_datetime() datetime.datetime(2025, 1, 30, 15, 25, 30) >>> dt = datetime.datetime(2025, 1, 30, 15, 25, 30) >>> we.Moment.from_datetime(dt) Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) Moment Validation A Moment is always a valid date-time. >>> we.Moment(2025, 1, 32, 0,0,0) Traceback (most recent call last): ... ValueError: Invalid moment: day is out of range for month Comaring Moments Moment s can be compared to one another >>> moment1 = we.Moment(2025, 1, 1, 0, 0, 0) >>> moment2 = we.Moment(2025, 1, 1, 1, 0, 0) >>> assert moment1 != moment2 >>> assert moment1 < moment2 >>> assert moment1 <= moment2 >>> assert moment2 > moment1 >>> assert moment2 >= moment1 >>> assert moment1 == we.Moment(2025, 1, 1, 0, 0, 0) Adding Deltas to Moments A Delta can be added to a Moment . >>> moment = we.Moment(2025, 1, 31, 12, 30, 30) >>> moment + we.Delta(years=1) Moment(year=2026, month=1, day=31, hour=12, minute=30, second=30) >>> moment + we.Delta(months=1) Moment(year=2025, month=2, day=28, hour=12, minute=30, second=30) >>> moment + we.Delta(days=2) Moment(year=2025, month=2, day=2, hour=12, minute=30, second=30) >>> # etc. ISO Year, Week, and Day Note Incorporating ISO year, week, and days is still a work-in-progress. A Moment 's ISO year, week, and weekday is accessible as follows: >>> moment = we.Moment(2019, 12, 31, 0,0,0) >>> moment.iso_year 2020 >>> moment.iso_week 1 >>> moment.iso_weekday 2","title":"Moment"},{"location":"tutorial/moment/#moment","text":"The Moment represents, as the name suggests, a moment in time . It is analogous to Python's datetime.datetime class. The Moment is a simple class that it is used prevalently throughought When-Exactly .","title":"Moment"},{"location":"tutorial/moment/#creating-a-moment","text":">>> import when_exactly as we >>> moment = we.Moment( ... year=2025, ... month=1, ... day=30, ... hour=15, ... minute=25, ... second=30, ... ) >>> moment Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) >>> # or, more concisely >>> we.Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) Moments can be created from datetimes, and can be converted to datetimes. >>> import datetime >>> moment.to_datetime() datetime.datetime(2025, 1, 30, 15, 25, 30) >>> dt = datetime.datetime(2025, 1, 30, 15, 25, 30) >>> we.Moment.from_datetime(dt) Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30)","title":"Creating a Moment"},{"location":"tutorial/moment/#moment-validation","text":"A Moment is always a valid date-time. >>> we.Moment(2025, 1, 32, 0,0,0) Traceback (most recent call last): ... ValueError: Invalid moment: day is out of range for month","title":"Moment Validation"},{"location":"tutorial/moment/#comaring-moments","text":"Moment s can be compared to one another >>> moment1 = we.Moment(2025, 1, 1, 0, 0, 0) >>> moment2 = we.Moment(2025, 1, 1, 1, 0, 0) >>> assert moment1 != moment2 >>> assert moment1 < moment2 >>> assert moment1 <= moment2 >>> assert moment2 > moment1 >>> assert moment2 >= moment1 >>> assert moment1 == we.Moment(2025, 1, 1, 0, 0, 0)","title":"Comaring Moments"},{"location":"tutorial/moment/#adding-deltas-to-moments","text":"A Delta can be added to a Moment . >>> moment = we.Moment(2025, 1, 31, 12, 30, 30) >>> moment + we.Delta(years=1) Moment(year=2026, month=1, day=31, hour=12, minute=30, second=30) >>> moment + we.Delta(months=1) Moment(year=2025, month=2, day=28, hour=12, minute=30, second=30) >>> moment + we.Delta(days=2) Moment(year=2025, month=2, day=2, hour=12, minute=30, second=30) >>> # etc.","title":"Adding Deltas to Moments"},{"location":"tutorial/moment/#iso-year-week-and-day","text":"Note Incorporating ISO year, week, and days is still a work-in-progress. A Moment 's ISO year, week, and weekday is accessible as follows: >>> moment = we.Moment(2019, 12, 31, 0,0,0) >>> moment.iso_year 2020 >>> moment.iso_week 1 >>> moment.iso_weekday 2","title":"ISO Year, Week, and Day"}]}