{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"When-Exactly An expressive and intuitive library for working with dates. Rationale When people think about dates and times we tend to think in terms of years , months , weeks , days , hours , minutes , etc. When-Exactly is a library that aims to bring these types into the hands of developers, so they can write more expressive code when working with dates. Overview >>> import when_exactly as we >>> year = we.Year(2025) # the year 2025 >>> year Year(2025) >>> month = year.month(1) # month 1 (January) >>> month Month(2025, 1) >>> day = we.Day(2025, 12, 25) # December 25, 2025 >>> day Day(2025, 12, 25) >>> day.month() # the month that the day is a part of Month(2025, 12) >>> day.week() # the week that the day is a part of Week(2025, 52)","title":"Home"},{"location":"#when-exactly","text":"An expressive and intuitive library for working with dates.","title":"When-Exactly"},{"location":"#rationale","text":"When people think about dates and times we tend to think in terms of years , months , weeks , days , hours , minutes , etc. When-Exactly is a library that aims to bring these types into the hands of developers, so they can write more expressive code when working with dates.","title":"Rationale"},{"location":"#overview","text":">>> import when_exactly as we >>> year = we.Year(2025) # the year 2025 >>> year Year(2025) >>> month = year.month(1) # month 1 (January) >>> month Month(2025, 1) >>> day = we.Day(2025, 12, 25) # December 25, 2025 >>> day Day(2025, 12, 25) >>> day.month() # the month that the day is a part of Month(2025, 12) >>> day.week() # the week that the day is a part of Week(2025, 52)","title":"Overview"},{"location":"getting-started/","text":"Getting Started Installation pip install when-exactly Usage Since when_exactly is a bit verbose, it is recommended to use an import alias, such as we . import when_exactly as we","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"pip install when-exactly","title":"Installation"},{"location":"getting-started/#usage","text":"Since when_exactly is a bit verbose, it is recommended to use an import alias, such as we . import when_exactly as we","title":"Usage"},{"location":"tutorial/advanced-concepts/","text":"","title":"Advanced concepts"},{"location":"tutorial/core-concepts/","text":"Core Concepts Since When-Exactly allows developers to interact with dates and times in a very unique way, it is worth while becoming familiar with some of the lower-level building blocks. Moment The Moment represents, a moment in time . This is analogous to Python's datetime.datetime class. Note The resolution of a moment is limited to a second . If you need more resolution, then when-exactly is probably not the library you need. Delta The Delta is analogous to Python's `datetime.timedelta , with extra functionality for deltas of months and years . Interval An interval represents a time span . An interval has a start and a stop . >>> interval = we.Interval( ... start=we.Moment(2025, 2, 14, 12, 0, 0,), ... stop=we.Moment(2025, 2, 14, 12, 30, 0), ... ) >>> str(interval) '2025-02-14T12:00:00/2025-02-14T12:30:00' This is the building block of all the custom intervals like Year , Month , etc. Intervals Intervals represents a collection of Interval objects . It provides all of the standard functionality you would expect a container to have >>> intervals = we.Intervals([ ... we.Day(2023, 1, 5), ... we.Day(2023, 1, 7), ... we.Week(2023, 10), ... ]) >>> intervals[0] Day(2023, 1, 5) >>> intervals[0:2] Intervals([Day(2023, 1, 5), Day(2023, 1, 7)]) >>> we.Week(2023, 10) in intervals True >>> for interval in intervals: ... print(interval) 2023-01-05 2023-01-07 2023-W10","title":"Core Concepts"},{"location":"tutorial/core-concepts/#core-concepts","text":"Since When-Exactly allows developers to interact with dates and times in a very unique way, it is worth while becoming familiar with some of the lower-level building blocks.","title":"Core Concepts"},{"location":"tutorial/core-concepts/#moment","text":"The Moment represents, a moment in time . This is analogous to Python's datetime.datetime class. Note The resolution of a moment is limited to a second . If you need more resolution, then when-exactly is probably not the library you need.","title":"Moment"},{"location":"tutorial/core-concepts/#delta","text":"The Delta is analogous to Python's `datetime.timedelta , with extra functionality for deltas of months and years .","title":"Delta"},{"location":"tutorial/core-concepts/#interval","text":"An interval represents a time span . An interval has a start and a stop . >>> interval = we.Interval( ... start=we.Moment(2025, 2, 14, 12, 0, 0,), ... stop=we.Moment(2025, 2, 14, 12, 30, 0), ... ) >>> str(interval) '2025-02-14T12:00:00/2025-02-14T12:30:00' This is the building block of all the custom intervals like Year , Month , etc.","title":"Interval"},{"location":"tutorial/core-concepts/#intervals","text":"Intervals represents a collection of Interval objects . It provides all of the standard functionality you would expect a container to have >>> intervals = we.Intervals([ ... we.Day(2023, 1, 5), ... we.Day(2023, 1, 7), ... we.Week(2023, 10), ... ]) >>> intervals[0] Day(2023, 1, 5) >>> intervals[0:2] Intervals([Day(2023, 1, 5), Day(2023, 1, 7)]) >>> we.Week(2023, 10) in intervals True >>> for interval in intervals: ... print(interval) 2023-01-05 2023-01-07 2023-W10","title":"Intervals"},{"location":"tutorial/delta/","text":"Delta","title":"Delta"},{"location":"tutorial/delta/#delta","text":"","title":"Delta"},{"location":"tutorial/moment/","text":"Moment The Moment represents a moment in time . It is analogous to Python's datetime.datetime class. The Moment is a simple class that it is used prevalently throughout When-Exactly . Creating a Moment >>> import when_exactly as we >>> moment = we.Moment( ... year=2025, ... month=1, ... day=30, ... hour=15, ... minute=25, ... second=30, ... ) >>> moment Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) >>> # or, more concisely >>> we.Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) Moments can be created from datetimes, and can be converted to datetimes. >>> import datetime >>> moment.to_datetime() datetime.datetime(2025, 1, 30, 15, 25, 30) >>> dt = datetime.datetime(2025, 1, 30, 15, 25, 30) >>> we.Moment.from_datetime(dt) Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) Moment Validation A Moment is always a valid date-time. >>> we.Moment(2025, 1, 32, 0,0,0) Traceback (most recent call last): ... ValueError: Invalid moment: day is out of range for month Comaring Moments Moment s can be compared to one another >>> moment1 = we.Moment(2025, 1, 1, 0, 0, 0) >>> moment2 = we.Moment(2025, 1, 1, 1, 0, 0) >>> assert moment1 != moment2 >>> assert moment1 < moment2 >>> assert moment1 <= moment2 >>> assert moment2 > moment1 >>> assert moment2 >= moment1 >>> assert moment1 == we.Moment(2025, 1, 1, 0, 0, 0) Adding Deltas to Moments A Delta can be added to a Moment . >>> moment = we.Moment(2025, 1, 31, 12, 30, 30) >>> moment + we.Delta(years=1) Moment(year=2026, month=1, day=31, hour=12, minute=30, second=30) >>> moment + we.Delta(months=1) Moment(year=2025, month=2, day=28, hour=12, minute=30, second=30) >>> moment + we.Delta(days=2) Moment(year=2025, month=2, day=2, hour=12, minute=30, second=30) >>> # etc. ISO Year, Week, and Day Note Incorporating ISO year, week, and days is still a work-in-progress. A Moment 's ISO year, week, and weekday is accessible as follows: >>> moment = we.Moment(2019, 12, 31, 0,0,0) >>> moment.iso_year 2020 >>> moment.iso_week 1 >>> moment.iso_weekday 2","title":"Moment"},{"location":"tutorial/moment/#moment","text":"The Moment represents a moment in time . It is analogous to Python's datetime.datetime class. The Moment is a simple class that it is used prevalently throughout When-Exactly .","title":"Moment"},{"location":"tutorial/moment/#creating-a-moment","text":">>> import when_exactly as we >>> moment = we.Moment( ... year=2025, ... month=1, ... day=30, ... hour=15, ... minute=25, ... second=30, ... ) >>> moment Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) >>> # or, more concisely >>> we.Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30) Moments can be created from datetimes, and can be converted to datetimes. >>> import datetime >>> moment.to_datetime() datetime.datetime(2025, 1, 30, 15, 25, 30) >>> dt = datetime.datetime(2025, 1, 30, 15, 25, 30) >>> we.Moment.from_datetime(dt) Moment(year=2025, month=1, day=30, hour=15, minute=25, second=30)","title":"Creating a Moment"},{"location":"tutorial/moment/#moment-validation","text":"A Moment is always a valid date-time. >>> we.Moment(2025, 1, 32, 0,0,0) Traceback (most recent call last): ... ValueError: Invalid moment: day is out of range for month","title":"Moment Validation"},{"location":"tutorial/moment/#comaring-moments","text":"Moment s can be compared to one another >>> moment1 = we.Moment(2025, 1, 1, 0, 0, 0) >>> moment2 = we.Moment(2025, 1, 1, 1, 0, 0) >>> assert moment1 != moment2 >>> assert moment1 < moment2 >>> assert moment1 <= moment2 >>> assert moment2 > moment1 >>> assert moment2 >= moment1 >>> assert moment1 == we.Moment(2025, 1, 1, 0, 0, 0)","title":"Comaring Moments"},{"location":"tutorial/moment/#adding-deltas-to-moments","text":"A Delta can be added to a Moment . >>> moment = we.Moment(2025, 1, 31, 12, 30, 30) >>> moment + we.Delta(years=1) Moment(year=2026, month=1, day=31, hour=12, minute=30, second=30) >>> moment + we.Delta(months=1) Moment(year=2025, month=2, day=28, hour=12, minute=30, second=30) >>> moment + we.Delta(days=2) Moment(year=2025, month=2, day=2, hour=12, minute=30, second=30) >>> # etc.","title":"Adding Deltas to Moments"},{"location":"tutorial/moment/#iso-year-week-and-day","text":"Note Incorporating ISO year, week, and days is still a work-in-progress. A Moment 's ISO year, week, and weekday is accessible as follows: >>> moment = we.Moment(2019, 12, 31, 0,0,0) >>> moment.iso_year 2020 >>> moment.iso_week 1 >>> moment.iso_weekday 2","title":"ISO Year, Week, and Day"},{"location":"tutorial/months/","text":"Months","title":"Months"},{"location":"tutorial/months/#months","text":"","title":"Months"},{"location":"tutorial/year/","text":"Year The Year represents an entire year, starting from January 1 to December 31 . Creating a Year >>> import when_exactly as we >>> year = we.Year(2025) >>> year Year(2025) >>> str(year) '2025' The Months of a Year A Year has a .months() , which returns the Months . of the year. >>> months = year.months() >>> len(months) 12 >>> months[0] Month(2025, 1) >>> months[-2:] Months([Month(2025, 11), Month(2025, 12)])","title":"Year"},{"location":"tutorial/year/#year","text":"The Year represents an entire year, starting from January 1 to December 31 .","title":"Year"},{"location":"tutorial/year/#creating-a-year","text":">>> import when_exactly as we >>> year = we.Year(2025) >>> year Year(2025) >>> str(year) '2025'","title":"Creating a Year"},{"location":"tutorial/year/#the-months-of-a-year","text":"A Year has a .months() , which returns the Months . of the year. >>> months = year.months() >>> len(months) 12 >>> months[0] Month(2025, 1) >>> months[-2:] Months([Month(2025, 11), Month(2025, 12)])","title":"The Months of a Year"}]}